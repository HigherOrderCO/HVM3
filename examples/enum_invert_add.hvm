// This file shows how we can use superpositionn to apply multiple functions to
// the same input, in a way that "shares computations" across different calls.
// In this example, we apply `add(0)`, `add(1)`, ..., `add(2^64-1)` - i.e., 2^64
// different functions, to the same input, 10,000,000. Then, we check
// `addN(10,000,000) = 99,999,999`, and eliminate all universes that don't
// satisfy this equation. Since `inc` fuses, and since `addN` is a superposition
// of every function, there is a *massive* amount of sharing between different
// universes (i.e., the universe where we check `add1(10,000,00) = 99,999,999`,
// the universe where we check `add2(10,000,00) = 99,999,999`, and so on). Thus,
// after trying all possible universes, we eventually find out that the only
// universe that is *not* destroyed is `add89999999(10,000,00) = 99,999,999`.
// We then use this information to output `89,999,999`, which is the solution to
// the `10,000,000 + X = 99,999,999` equation. And the magic is: this happens in
// just 196411 interactions (0.001 seconds). In any other language, this would
// take *at least* enough time to call `add` 2^64 times, which is probably
// weeks. In other words, we effectivelly implemented 'sub' efficiently, by
// using superpositions to enumerate the domain of 'add(N,x)', inverting it.  Of
// course, 'add' is a very simple function. Can this technique be used to invert
// more complex functions efficiently? See 'enum_1D_match.hvml' for an attempt.

data Bool { #T #F }
data Pair { #P{x y} }
data Bin { #O{p} #I{p} #E }
data Nat { #S{p} #Z }
data Map { #BR{x y} #M0 #M1 }

// Prelude
// -------

// If/Exit
@when(!c t) = ~ c {
  0: *
  p: t
}

// And
!@and(!a b) = ~ a {
  0: 0
  p: b
}

// Repeated Application
@rep(n f x) = ~ n !f !x {
  0: x
  p: !&0{f0 f1}=f (f0 @rep(p f1 x))
}

// Squared Application
@sqr(n f x) = ~ n !f !x {
  0: x
  p: !&0{p0 p1}=(+ p 1)
     !&0{fA f0}=f
     !&0{f1 f2}=fA
     @sqr((/ p0 2) λk(f0 (f1 k)) @rep((% p1 2) f2 x))
}

// Church Nat (with fusion)
@nat(n) = λs λz @sqr(n s z)

// Fixed Point
@fix(f) = !&{f f0}=f !&{f f1}=f (f0 @fix(f1))

// λ-Encoded Nats
// --------------

// Constructors
@S(n) = λs λz (s n)
@Z    = λs λz z

// Nat
@nat_all = &1{@Z @S(@nat_all)}

// Nat → Nat
@nat_view(n) =
  ! case_s = λp #S{@nat_view(p)}
  ! case_z = #Z
  (n case_s case_z)

// U32 → Nat
@nat(n) = ~ n {
  0: @Z
  n: @S(@nat(n))
}

// λ-Encoded Bitstrings
// --------------------

// Constructors
@E     = λo λi λe e
@O(xs) = λo λi λe (o xs)
@I(xs) = λo λi λe (i xs)

// Bin
@bin_zero(n) = ~ n {
  0: @E
  n: @O(@bin_zero(n))
}

// U32 → U32 → Bin
@bin(l n) =
  @sqr(n λx@bin_inc(x) @bin_zero(l))

// Bin → U32
@bin_to_u32(x) =
  ! case_o = λp (+ (* @bin_to_u32(p) 2) 0)
  ! case_i = λp (+ (* @bin_to_u32(p) 2) 1)
  ! case_e = 0
  (x case_o case_i case_e)

// Bin → Bin
@bin_id(x) = λo λi λe
  (x o i e)

// Bin → Bin
@bin_inc(x) = λo λi λe 
  ! case_o = λp (i p)
  ! case_i = λp (o @bin_inc(p))
  ! case_e = e
  (x case_o case_i case_e)

// Bin → Bin → Bin
@bin_add(a b) =
  !case_o = λaP λb λo λi λe
    !case_o = λbP λaP (o @bin_add(aP bP))
    !case_i = λbP λaP (i @bin_add(aP bP))
    !case_e = λaP e
    (b case_o case_i case_e aP)
  !case_i = λaP λb λo λi λe
    !case_o = λbP λaP (i @bin_add(aP bP))
    !case_i = λbP λaP (o @bin_inc(@bin_add(aP bP)))
    !case_e = λaP e
    (b case_o case_i case_e aP)
  !case_e = λb b
  (a case_o case_i case_e b)

// Bin → Bin → Bin
@bin_add_2(a b) =
  @bin_sqr(a λx(@bin_inc(x)) b)

// Bin → Bin -> Bool
@bin_eql(a b) =
  !case_o = λaP λb
    !case_o = λbP λaP @bin_eql(aP bP)
    !case_i = λbP λaP 0
    !case_e = λaP 0
    (b case_o case_i case_e aP)
  !case_i = λaP λb
    !case_o = λbP λaP 0
    !case_i = λbP λaP @bin_eql(aP bP)
    !case_e = λaP 0
    (b case_o case_i case_e aP)
  !case_e = λb
    !case_o = λbP 0
    !case_i = λbP 0
    !case_e = 1
    (b case_o case_i case_e)
  (a case_o case_i case_e b)

// Bin → Bin
@bin_view(x) =
  ! case_o = λp #O{@bin_view(p)}
  ! case_i = λp #I{@bin_view(p)}
  ! case_e = #E
  (x case_o case_i case_e)

// U32 → Bin
@bin_all(n) = ~ n {
  0: λo λi λe e
  n:
    ! &1{n0 n1} = n
    &1{
      λo λi λe (o @bin_all(n0))
      λo λi λe (i @bin_all(n1))
    }
}

// Bin → U32
@bin_len(xs) =
  ! case_o = λxs (+ 1 @bin_len(xs))
  ! case_i = λxs (+ 1 @bin_len(xs))
  ! case_e = 0
  (xs case_o case_i case_e)

// Squared Application (with a bitstring)
@bin_sqr(xs f x) =
  ! case_o = λxs λf λx !&{f0 f1}=f @bin_sqr(xs λk(f0 (f1 k)) x)
  ! case_i = λxs λf λx !&{F f01}=f !&{f0 f1}=f01 @bin_sqr(xs λk(f0 (f1 k)) (F x))
  ! case_e = λf λx x
  (xs case_o case_i case_e f x)

//Test:
@L = 64
@A = @bin(@L 10000000)
@X = @bin_all(@L)
@B = @bin(@L 99999999)
@main =
  ! solved = @bin_eql(@bin_add_2(@A @X) @B) // A + X = B
  @when(solved @bin_to_u32(@X)) // Prints X
